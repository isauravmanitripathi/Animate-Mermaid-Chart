Create a Mermaid diagram for the following text about {topic}.

Text to analyze:
{text}

Use a sequential node-connection pattern with the following structure:
1. Define a node
2. Immediately define any connections to previously defined nodes
3. Move to the next node
4. Repeat the pattern

Here's the exact sequential pattern to follow:
```
graph TD
%% First node
EIC[East India Company]

%% Second node
Crown[British Crown]
%% Connection between first and second nodes
Crown -->|Granted charter| EIC

%% Third node
Trade[Commercial Activities]
%% Connections from existing nodes to the new node
EIC -->|Primary focus| Trade
```

Follow these specific rules:
- Create a complete, standalone diagram for the text
- Format node labels clearly with relevant information
- Group related nodes with clear section comments using %% before each section
- The diagram should have a balanced connection density - not linear but also not overwhelming
- Create meaningful connections that emphasize key relationships rather than connecting everything

**Node Definition Rules**
* Use descriptive, semantic IDs for nodes that reflect their content (e.g., EIC for East India Company)
* Never reference a node before defining it first
* Never reuse node IDs anywhere in the diagram
* Node labels must be enclosed in square brackets: EIC[East India Company]
* No space between node ID and opening bracket: EIC[Label] not EIC [Label]
* Avoid HTML tags inside node text - use spaces instead
* Keep node text concise but informative
* For first-time entities, always define the node before using it in any connection

**Node Naming Convention**
* Use descriptive abbreviations or short words as node IDs
* Examples: EIC (East India Company), Trade, Spices, Posts
* Avoid generic sequential naming like A1, B1, C1 unless absolutely necessary
* For people, use their last names or roles as IDs: Elizabeth, Governor
* For concepts, use abbreviated versions: CommTrade (Commercial Trade)
* Always ensure node IDs are intuitive and relate to the content

**Strict Sequential Structure**
* Define exactly one node at a time
* Immediately after defining a node, define its connections to previously defined nodes
* Make sure the pattern is always: node definition → connections → next node definition
* Do not define multiple nodes in sequence without defining their connections
* Always maintain this rigid structure throughout the entire diagram
* Add comments before each new node to indicate what it represents

**Connection Rules**
* Use --> for directed connections (arrows)
* Use --- for undirected connections (lines)
* Use <--> for bidirectional relationships that are equally important
* Define connections immediately after defining a new node
* Be selective with connections - only show the most important relationships
* Aim for 2-3 connections per node on average, not every possible relationship
* Prioritize clarity over completeness

**Connection Label Rules**
* For labeled connections, use the pipe syntax: EIC -->|Established| Posts
* Never use colons for connection labels like EIC --> Posts : Established (this will cause errors)
* Keep connection labels concise - 1-3 words maximum
* For bidirectional connections: Trade <-->|Goods exchange| Europe
* Place the label between pipes: |Label Text|
* Define the connection and its label on the same line

**Clear Diagram Structure**
* Start with main entities/concepts
* Add supporting details as secondary nodes
* Create a hierarchy of information with the most important elements emphasized
* Use subgraphs only when logically grouping related concepts
* Keep the diagram readable at a glance - no more than 15-20 nodes for complex topics
* Ensure the diagram tells a coherent story that can be easily followed

**Error Prevention Best Practices**
* Always define a node before referencing it in connections
* Use proper pipe syntax for labels: A -->|Label| B 
* Keep connection density balanced - not too sparse, not too cluttered
* Test complex constructs in smaller chunks
* Avoid special characters that might be misinterpreted
* Never truncate syntax with comments like "// rest of diagram"

**Working Example with Proper Sequential Structure**
```
graph TD
%% First main entity
EIC[East India Company]

%% Second main entity
Crown[British Crown]
%% Connection to first entity
Crown -->|Granted charter| EIC

%% Third main entity
Trade[Commercial Trading]
%% Connections to existing entities
EIC -->|Primary activity| Trade
Trade -->|Generated revenue| Crown

%% Fourth entity
Posts[Trading Posts]
%% Connections to existing entities
EIC -->|Established| Posts
Posts -->|Facilitated| Trade

%% Fifth entity
Goods[Spices and Textiles]
%% Connections to existing entities
Trade -->|Exported| Goods
Goods -->|Sold in| Europe[European Markets]
```

When creating the diagram:
  1. Start with a comment indicating what this first node represents
  2. Define exactly one node with a meaningful, descriptive ID
  3. Add another comment for connections
  4. Connect this node with important, selective relationships to existing nodes
  5. Move to the next node and repeat the pattern
  6. Maintain this rigid sequential structure throughout

Create a properly structured diagram with:
  1. Start with mermaid graph TD or graph LR header
  2. Define main entities with descriptive IDs
  3. Create meaningful connections between them

CRITICAL: Your response MUST be ONLY a valid JSON object with EXACTLY these keys:
{json_example}

IMPORTANT FORMATTING INSTRUCTIONS:
- Properly indent all code (4 spaces per level)
- Put each node or connection on its own line
- Follow the strict sequential pattern: node definition → connections → next node
- Start with section comments (using %%) to explain what each node represents
- Use descriptive, semantic IDs for all nodes

Return ONLY the JSON object without any markdown code blocks or other text.